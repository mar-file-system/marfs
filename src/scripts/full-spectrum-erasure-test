#!/bin/bash
# 
# Copyright 2015. Triad National Security, LLC. All rights reserved.
# 
# Full details and licensing terms can be found in the License file in the main development branch
# of the repository.
# 
# MarFS was reviewed and released by LANL under Los Alamos Computer Code identifier: LA-CC-15-039.
# INFILE="./testfile"
STRIPE="./stripe/chunk."
OUTFILE="./cmpfile"

for n in {1..15}; do
   for e in {0..4}; do

      parts=$((n+e))
      echo "Striping as $n+$e..."
      neutil write "$STRIPE{b}" $n $e 0 -i "$INFILE" >/dev/null 2>&1
      if [ $? -ne 0 ]; then echo "   failed to write new stripe!"; exit -1; fi
      if ! neutil verify "$STRIPE{b}" -n $((n+e))  >/dev/null 2>&1; then
         echo "   failed to read the unerrored stripe!"
#      elif ! diff "$INFILE" "$OUTFILE" 2>/dev/null; then
#         echo "   comparison failed for the unerrored stripe!"
      fi

#      rm "$OUTFILE" -f

      for numerrs in $( seq -s ' ' 1 $e ); do
         errors=()
         for enum in $( seq -s ' ' 0 $((numerrs - 1)) ); do
            errors[$enum]=$enum
         done

         {
         iterpos=$(( numerrs -1 ))
         while [ $iterpos -ge 0 ]; do
            # relocate 'error' parts out of the way
            for err in ${errors[@]}; do
               mv "$STRIPE$err" "$STRIPE$err".backup
            done
            # check for an incomplete read
            if ! neutil verify "$STRIPE%d" -n $((n+e)) >/dev/null 2>&1; then
               echo "   read failed for epat: ${errors[@]}"
#            elif ! diff "$INFILE" "$OUTFILE" 2>/dev/null; then
#               echo "   comparison failed for epat: ${errors[@]}"
            fi
#            rm "$OUTFILE" -f
            # move the 'error' parts back to their original location
            for err in ${errors[@]}; do
               mv "$STRIPE$err".backup "$STRIPE$err"
            done
            # adjust error positions for the next iteration
            iterpos=$(( numerrs -1 ))
            while [[ 1 ]]; do
               # if this value is at its max, need to iterate on the previous
               if [ $iterpos -lt 0 ]; then
                  break
               elif [[ ${errors[$iterpos]} -ge $(( ( parts - numerrs ) + iterpos )) ]]; then 
                  ((iterpos--))
                  continue
               else
                  errors[$iterpos]=$(( ${errors[$iterpos]} + 1 ))
                  for fix in $( seq -s ' ' $(( iterpos + 1 )) $(( numerrs - 1 )) ); do errors[$fix]=$(( ${errors[$((fix-1))]} + 1 )); done
                  break
               fi
            done
         done
         }
      done

      echo "   ...removing striping"
      rm "$STRIPE"* -f
   done
done

